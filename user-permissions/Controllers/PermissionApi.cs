/*
 * user-permissions
 *
 * Получение роли и доступов, настройка ролей пользователей в админке
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;
using user_permissions;
using System.IdentityModel.Tokens.Jwt;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PermissionApiController : ControllerBase
    {
        public PermissionApiController(DataContext dbContext)
        {
            this.context = dbContext;
        }

        private readonly DataContext context;

        private string? GetJWT()
        {
            var authHeader = Request.Headers["Authorization"];
            if (authHeader.Count == 0)
            {
                return null;
            }
            var jwt = authHeader[0];
            if (jwt == null || !jwt.StartsWith("Bearer "))
            {
                return null;
            }
            return jwt.Substring("Bearer ".Length);
        }
        /// <summary>
        /// Получение доступов пользователя по информации, содержащейся в bearer token
        /// </summary>
        /// <remarks>Получение доступов пользователя по информации, содержащейся в bearer token</remarks>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">unexpected error</response>
        [HttpGet]
        [Route("/permissions")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetUserPermissions")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserPermissions), description: "Successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "unexpected error")]
        public /*virtual*/ IActionResult GetUserPermissions()
        {
            /*List<UserPermissions> l = new () {
                new UserPermissions { UserRole = "MANAGER", Permissions = new List<string> { "PERM_ABSENCE_MANAGER_READ", "PERM_HEALTHCHECK_MANAGER_READ", "PERM_MYDEPARTMENTS_MANAGER_READ" } },
                new UserPermissions { UserRole = "HRPARTNER", Permissions = new List<string> { "PERM_ABSENCE_READ", "PERM_HEALTHCHECK_ADD", "PERM_MYDEPARTMENTS_READ" } },
                new UserPermissions { UserRole = "HRDEV", Permissions = new List<string> { "PERM_ABSENCE_READ", "PERM_MYDEPARTMENTS_READ" } },
                new UserPermissions { UserRole = "SUPERUSER", Permissions = new List<string> { "PERM_USER_ROLE_ADD", "PERM_ABSENCE_READ", "PERM_HEALTHCHECK_ADD", "PERM_MYDEPARTMENTS_READ" } }
            };
            return new ObjectResult(l.Where(x => x.UserRole == body._UserRole).FirstOrDefault());*/
            var jwt = GetJWT();
            if (jwt == null)
            {
                return BadRequest();
            }
            var handler = new JwtSecurityTokenHandler();
            var jsonToken = handler.ReadToken(jwt) as JwtSecurityToken;
            if (jsonToken == null)
            {
                return BadRequest();
            }
            var login = jsonToken.Payload
                .Where(pl => pl.Key == "login")
                .Select(pl => pl.Value)
                .FirstOrDefault();
            if (login == null)
            {
                return BadRequest();
            }
            var userRole = context.UserRoles
                .Where(ur => ur.UserLogin == login)
                .FirstOrDefault();
            if (userRole == null)
            {
                return NotFound();
            }
            var permission = context.Permissions
                .Where(p => p.UserRole == userRole._UserRole)
                .FirstOrDefault();
            if (permission == null)
            {
                return NotFound();
            }
            return new ObjectResult(permission);


            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserPermissions));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            /*string exampleJson = null;
            exampleJson = "{\n  \"permissions\" : [ \"permissions\", \"permissions\" ],\n  \"userRole\" : \"userRole\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<UserPermissions>(exampleJson)
                        : default(UserPermissions);            //TODO: Change the data returned
            return new ObjectResult(example);*/
        }
    }
}
